package {{com}}.{{company}}.{{org}}.{{service}}.configuration;

import {{chenilePackage}}.stm.STM;
import {{chenilePackage}}.stm.action.STMTransitionAction;
import {{chenilePackage}}.stm.impl.BeanFactoryAdapter;
import {{chenilePackage}}.stm.impl.STMActionsInfoProvider;
import {{chenilePackage}}.stm.impl.STMFlowStoreImpl;
import {{chenilePackage}}.stm.impl.STMImpl;
import {{chenilePackage}}.stm.impl.XmlFlowReader;
import {{chenilePackage}}.stm.spring.SpringBeanFactoryAdapter;
import {{chenilePackage}}.workflow.param.MinimalPayload;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import {{chenilePackage}}.utils.entity.service.EntityStore;
import {{chenilePackage}}.workflow.service.impl.StateEntityServiceImpl;
import {{chenilePackage}}.workflow.service.stmcmds.*;
import {{com}}.{{company}}.{{org}}.{{service}}.model.{{Service}};
import {{com}}.{{company}}.{{org}}.{{service}}.service.cmds.Assign{{Service}}Action;
import {{com}}.{{company}}.{{org}}.{{service}}.service.cmds.DefaultSTMTransitionAction;
import {{com}}.{{company}}.{{org}}.{{service}}.service.cmds.Close{{Service}}Action;
import {{com}}.{{company}}.{{org}}.{{service}}.service.cmds.Resolve{{Service}}Action;
import {{com}}.{{company}}.{{org}}.{{service}}.service.healthcheck.{{Service}}HealthChecker;
import {{com}}.{{company}}.{{org}}.{{service}}.service.store.{{Service}}EntityStore;
import {{chenilePackage}}.workflow.api.WorkflowRegistry;
{{#security}}
import {{chenilePackage}}.workflow.service.stmcmds.StmAuthoritiesBuilder;
import java.util.function.Function;
import {{chenilePackage}}.core.context.ChenileExchange;
{{/security}}

/**
 This is where you will instantiate all the required classes in Spring
*/
@Configuration
public class {{Service}}Configuration {
	private static final String FLOW_DEFINITION_FILE = "{{com}}/{{company}}/{{org}}/{{service}}/{{service}}-states.xml";
	
	@Bean BeanFactoryAdapter {{service}}BeanFactoryAdapter() {
		return new SpringBeanFactoryAdapter();
	}
	
	@Bean STMFlowStoreImpl {{service}}FlowStore(@Qualifier("{{service}}BeanFactoryAdapter") BeanFactoryAdapter {{service}}BeanFactoryAdapter) throws Exception{
		STMFlowStoreImpl stmFlowStore = new STMFlowStoreImpl();
		stmFlowStore.setBeanFactory({{service}}BeanFactoryAdapter);
		return stmFlowStore;
	}
	
	@Bean @Autowired STM<{{Service}}> {{service}}EntityStm(@Qualifier("{{service}}FlowStore") STMFlowStoreImpl stmFlowStore) throws Exception{
		STMImpl<{{Service}}> stm = new STMImpl<>();		
		stm.setStmFlowStore(stmFlowStore);
		return stm;
	}
	
	@Bean @Autowired STMActionsInfoProvider {{service}}ActionsInfoProvider(@Qualifier("{{service}}FlowStore") STMFlowStoreImpl stmFlowStore) {
		STMActionsInfoProvider provider =  new STMActionsInfoProvider(stmFlowStore);
        WorkflowRegistry.addSTMActionsInfoProvider("{{service}}",provider);
        return provider;
	}
	
	@Bean EntityStore<{{Service}}> {{service}}EntityStore() {
		return new {{Service}}EntityStore();
	}
	
	@Bean @Autowired StateEntityServiceImpl<{{Service}}> _{{service}}StateEntityService_(
			@Qualifier("{{service}}EntityStm") STM<{{Service}}> stm,
			@Qualifier("{{service}}ActionsInfoProvider") STMActionsInfoProvider {{service}}InfoProvider,
			@Qualifier("{{service}}EntityStore") EntityStore<{{Service}}> entityStore){
		return new StateEntityServiceImpl<>(stm, {{service}}InfoProvider, entityStore);
	}
	
	// Now we start constructing the STM Components 
	
	@Bean @Autowired GenericEntryAction<{{Service}}> {{service}}EntryAction(@Qualifier("{{service}}EntityStore") EntityStore<{{Service}}> entityStore,
			@Qualifier("{{service}}ActionsInfoProvider") STMActionsInfoProvider {{service}}InfoProvider){
		return new GenericEntryAction<{{Service}}>(entityStore,{{service}}InfoProvider);
	}
	
	@Bean GenericExitAction<{{Service}}> {{service}}ExitAction(){
		return new GenericExitAction<{{Service}}>();
	}

	@Bean
	XmlFlowReader {{service}}FlowReader(@Qualifier("{{service}}FlowStore") STMFlowStoreImpl flowStore) throws Exception {
		XmlFlowReader flowReader = new XmlFlowReader(flowStore);
		flowReader.setFilename(FLOW_DEFINITION_FILE);
		return flowReader;
	}
	

	@Bean {{Service}}HealthChecker {{service}}HealthChecker(){
    	return new {{Service}}HealthChecker();
    }

    @Bean STMTransitionAction<{{Service}}> default{{service}}STMTransitionAction() {
        return new DefaultSTMTransitionAction<MinimalPayload>();
    }

    @Bean
    STMTransitionActionResolver {{service}}TransitionActionResolver(
    @Qualifier("default{{service}}STMTransitionAction") STMTransitionAction<{{Service}}> defaultSTMTransitionAction){
        return new STMTransitionActionResolver("{{service}}",defaultSTMTransitionAction);
    }

    @Bean @Autowired StmBodyTypeSelector {{service}}BodyTypeSelector(
    @Qualifier("{{service}}ActionsInfoProvider") STMActionsInfoProvider {{service}}InfoProvider,
    @Qualifier("{{service}}TransitionActionResolver") STMTransitionActionResolver stmTransitionActionResolver) {
        return new StmBodyTypeSelector({{service}}InfoProvider,stmTransitionActionResolver);
    }

    @Bean @Autowired STMTransitionAction<{{Service}}> {{service}}BaseTransitionAction(
    @Qualifier("{{service}}TransitionActionResolver") STMTransitionActionResolver stmTransitionActionResolver){
        return new BaseTransitionAction<>(stmTransitionActionResolver);
    }

    // Create the specific transition actions here. Make sure that these actions are inheriting from
    // AbstractSTMTransitionMachine (The sample classes provide an example of this). To automatically wire
    // them into the STM use the convention of "{{service}}" + eventId for the method name. ({{service}} is the
    // prefix passed to the TransitionActionResolver above.)
    // This will ensure that these are detected automatically by the Workflow system.
    // The payload types will be detected as well so that there is no need to introduce an <event-information/>
    // segment in src/main/resources/{{com}}/{{company}}/{{service}}/{{service}}-states.xml

    @Bean Resolve{{Service}}Action {{service}}Resolve() {
        return new Resolve{{Service}}Action();
    }

    @Bean Close{{Service}}Action {{service}}Close() {
        return new Close{{Service}}Action();
    }

    @Bean Assign{{Service}}Action {{service}}Assign() {
        return new Assign{{Service}}Action();
    }

    {{#security}}
    @Bean @Autowired Function<ChenileExchange, String[]> {{service}}EventAuthoritiesSupplier(
        @Qualifier("{{service}}ActionsInfoProvider") STMActionsInfoProvider {{service}}InfoProvider)
                    throws Exception{
        StmAuthoritiesBuilder builder = new StmAuthoritiesBuilder({{service}}InfoProvider);
        return builder.build();
    }
{{/security}}
}
