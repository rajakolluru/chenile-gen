{{#workflow}}
    {{#flows}}
        {{#states}}
            {{#transitions}}
--START--{{#capitalize}}{{eventId}}{{/capitalize}}{{Service}}Action.java
package {{com}}.{{company}}.{{org}}.{{service}}.service.cmds;

import {{chenilePackage}}.stm.STMInternalTransitionInvoker;
import {{chenilePackage}}.stm.State;
import {{chenilePackage}}.stm.model.Transition;

import {{chenilePackage}}.workflow.param.MinimalPayload;
import {{chenilePackage}}.workflow.service.stmcmds.AbstractSTMTransitionAction;
import {{com}}.{{company}}.{{org}}.{{service}}.model.{{Service}};

/**
 Contains customized logic for the transition. Common logic resides at {@link DefaultSTMTransitionAction}
 <p>Use this class if you want to augment the common logic for this specific transition</p>
 <p>Use a customized payload if required instead of MinimalPayload</p>
*/
public class {{#capitalize}}{{eventId}}{{/capitalize}}{{Service}}Action extends AbstractSTMTransitionAction<{{Service}},MinimalPayload>{
	@Override
	public void transitionTo({{Service}} {{service}}, MinimalPayload payload, State startState, String eventId,
			State endState, STMInternalTransitionInvoker<?> stm, Transition transition) throws Exception {
	}

}
--END--
            {{/transitions}}
        {{/states}}
    {{/flows}}
{{/workflow}}